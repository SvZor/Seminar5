// // Задача1.
// //  Напишите программу, которая на вход принимает позиции 
// // элемента в двумерном массиве, и возвращает значение этого 
// // элемента или же указание, что такого элемента нет: 
// // "Позиция по рядам выходит за пределы массива"
// // или
// // "Позиция по колонкам выходит за пределы массива"
// // Позиции в массиве считать от единицы.
// // В коде, начальные условия:
// // int[,] numbers = new int[,] {
// //     {1, 2, 3, 4},
// //     {5, 6, 7, 8},
// //     {9, 10, 11, 12}
// // };
// // int x = 2;
// // int y = 2;
// // Выводится: 6
// //РЕШЕНИЕ
// using System;
// //Тело класса будет написано студентом. Класс обязан иметь статический метод PrintResult()
// class UserInputToCompileForTest
// { 
// // Напишите программу, которая на вход принимает позиции элемента в двумерном массиве, и возвращает значение этого элемента или же указание, что такого элемента нет.
// // Поиск элемента по позициям
//     public static int FindElementByPosition(int[,] array, int x, int y)
//     {
//         //Напишите свое решение здесь
//       x--; // Коррекция для индексации с нуля
//         y--; // Коррекция для индексации с нуля

//         if (ValidatePosition(array, x, y)) // Проверяем валидность позиции
//         {
//             return array[x, y]; // Возвращаем значение элемента
//         }
//         else
//         {
//             // Если позиция невалидна, возвращаем -1 (значение можно выбрать иным)
//             return -1;
//         }
//     }
// // Проверка позиций на вхождение в массив
//     public static bool ValidatePosition(int[,] array, int x, int y)
//     {
//         //Напишите свое решение здесь
//       // Проверяем, находится ли x в пределах массива по рядам
//         bool validRow = x >= 0 && x < array.GetLength(0);

//         // Проверяем, находится ли y в пределах массива по колонкам
//         bool validColumn = y >= 0 && y < array.GetLength(1);

//         // Если и по рядам, и по колонкам валидно, возвращаем true
//         return validRow && validColumn;
//     }
//     public static void PrintResult(int[,] numbers, int x, int y)
//     {
//         //Напишите свое решение здесь
//       // Вызываем метод для поиска элемента и вывода результата
//         int result = FindElementByPosition(numbers, x, y);

//         if (result == -1)
//         {
//             Console.WriteLine("Позиция выходит за пределы массива");
//         }
//         else
//         {
//             Console.WriteLine(result);
//         }
//     }
// }
// //Не удаляйте и не меняйте класс Answer!
// class Answer
// {
//     public static void Main(string[] args)
//     {   
//         int[,] array;

//         int x, y;

//         if (args.Length >= 3)
//         {
//             // Предполагается, что строки разделены запятой и пробелом, а элементы внутри строк разделены пробелом
//             string[] rows = args[0].Split(',');

//             int rowCount = rows.Length;
//             int colCount = rows[0].Trim().Split(' ').Length;

//             array = new int[rowCount, colCount];

//             for (int i = 0; i < rowCount; i++)
//             {
//                 string[] rowElements = rows[i].Trim().Split(' ');

//                 for (int j = 0; j < colCount; j++)
//                 {
//                     if (int.TryParse(rowElements[j], out int result))
//                     {
//                         array[i, j] = result;
//                     }
//                     else
//                     {
//                         Console.WriteLine($"Error parsing element {rowElements[j]} to an integer.");
//                         return;
//                     }
//                 }
//             }

//             // Парсинг x и y из аргументов
//             if (int.TryParse(args[1], out x) && int.TryParse(args[2], out y))
//             {
//                 // Теперь у вас есть двумерный массив "array" и координаты x и y
//                 UserInputToCompileForTest.PrintResult(array, x, y);
//             }
//             else
//             {
//                 Console.WriteLine("Error parsing x or y to an integer.");
//             }
//         }
//         else
//         {
           
//             // Если аргументов на входе нет, используем примерный массив
//             array = new int[,]
//             {
//                 {1, 2, 3, 4},
//                 {5, 6, 7, 8},
//                 {9, 10, 11, 12}
//             };
//             x = 2;
//             y = 2;
            
//             UserInputToCompileForTest.PrintResult(array, x, y);
//         }                
//     }
// }

// Задача2.
// Задайте двумерный массив. Напишите программу, 
// которая поменяет местами первую и последнюю строку массива.
// Начальные условия:
// int[,] numbers = new int[,] {
//     {1, 2, 3, 4},
//     {5, 6, 7, 8},
//     {9, 10, 11, 12}
// }; 
// Выводится:
// 9   10  11  12
// 5   6   7   8
// 1   2   3   4

using System;
class UserInputToCompileForTest
{
    // Печать массива
    public static void PrintArray(int[,] array)
    {
        for (int i = 0; i < array.GetLength(0); i++)
        {
            for (int j = 0; j < array.GetLength(1); j++)
            {
                // Определение количества пробелов после числа в зависимости от его длины
                string space = array[i, j] >= 10 ? "  " : "   ";
                Console.Write(array[i, j] + space);
            }
            Console.WriteLine();
        }
    }

    // Обмен первой с последней строкой
    public static int[,] SwapFirstLastRows(int[,] array)
    {
        int rowCount = array.GetLength(0);
    int colCount = array.GetLength(1);
    
    // Создаем временный массив для хранения первой строки
    int[] tempRow = new int[colCount];
    
    // Копируем первую строку во временный массив
    for (int i = 0; i < colCount; i++)
    {
        tempRow[i] = array[0, i];
    }
    
    // Копируем последнюю строку в первую
    for (int i = 0; i < colCount; i++)
    {
        array[0, i] = array[rowCount - 1, i];
    }
    
    // Копируем временный массив (бывшую первую строку) в последнюю строку
    for (int i = 0; i < colCount; i++)
    {
        array[rowCount - 1, i] = tempRow[i];
    }
    
    return array;
    }

    // Обмен элементами массива
    public static void SwapItems(int[,] array, int i)
    {
        int temp = array[0, i];
        array[0, i] = array[array.GetLength(0) - 1, i];
        array[array.GetLength(0) - 1, i] = temp;
    }

    public static void PrintResult(int[,] numbers)
    {
        // Вызываем метод для обмена первой и последней строк
        SwapFirstLastRows(numbers);

        // Выводим массив после обмена
        PrintArray(numbers);
    }
}

class Answer
{
    public static void Main(string[] args)
    {
        int[,] numbers;

        if (args.Length >= 1)
        {
            // Предполагается, что строки разделены запятой и пробелом, а элементы внутри строк разделены пробелом
            string[] rows = args[0].Split(',');
            int rowCount = rows.Length;
            int colCount = rows[0].Trim().Split(' ').Length;
            numbers = new int[rowCount, colCount];

            for (int i = 0; i < rowCount; i++)
            {
                string[] rowElements = rows[i].Trim().Split(' ');

                for (int j = 0; j < colCount; j++)
                {
                    if (int.TryParse(rowElements[j], out int result))
                    {
                        numbers[i, j] = result;
                    }
                    else
                    {
                        Console.WriteLine($"Error parsing element {rowElements[j]} to an integer.");
                        return;
                    }
                }
            }
        }
        else
        {
            // Если аргументов на входе нет, используем примерный массив
            numbers = new int[,]
            {
                {1, 2, 3, 4},
                {5, 6, 7, 8},
                {9, 10, 11, 12}
            };
        }

        // Вызываем метод для вывода результата
        UserInputToCompileForTest.PrintResult(numbers);
    }
}